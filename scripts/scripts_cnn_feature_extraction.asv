
config_cnn_feature_extraction;

% for each data set
for idx_dataset = 1 : length(datasets_names)

    % get current data set name
    current_dataset_name = datasets_names{idx_dataset};

    % for each preprocessing strategy
    for idx_prepro = 1 : length(preprocessings_names)
    
        % get current preprocessing strategy
        current_prepro = preprocessings_names{idx_prepro};
        
        % for each crop type
        for idx_crops = 1 : length(crop_types)

            % get current crop type
            current_crop_type = crop_types{idx_crops};
            
            % for each augmentation technique
            for idx_augs = 1 : length(augs_types)

                % get current augmentation technique
                current_aug = augs_types{idx_augs};

                % identify path where the images are stored
                current_image_path = fullfile(root_path, current_dataset_name, current_prepro, strcat(current_crop_type, current_aug));
                % prepare output path
                current_output_path = fullfile(output_path, current_dataset_name, 'features', current_prepro, strcat(current_crop_type, current_aug));

                % get images in current path
                image_names = getMultipleImagesFileNames(current_image_path);
                
                % initialize the feature matrix
                features = zeros(length(image_names), cnn_dimensionality);
                
                % for each image
                for i = 1 : length(image_names)

                    % load and preprocess an image
                    im = imread(fullfile(current_image_path, image_names{i})) ;
                    
                    if (size(im,3)<3)
                        im2 zeros(size(im,1), size(im,2), 3);
                    
                    im_ = single(im) ; % note: 0-255 range
                    im_ = imresize(im_, net.meta.normalization.imageSize(1:2)) ;
                    im_ = bsxfun(@minus, im_, net.meta.normalization.averageImage) ;

                    % run the CNN
                    res = vl_simplenn(net, im_) ;

                    % show the classification result
                    scores = squeeze(gather(res(end).x)) ;
                    [bestScore, best] = max(scores) ;
                    figure(1) ; clf ; imagesc(im) ;
                    title(sprintf('%s (%d), score %.3f',...
                    net.meta.classes.description{best}, best, bestScore)) ;
                    %In order to compile the GPU support and other advanced features, see the installation instructions.
                
                end
                
            end
            
        end
        
    end

end